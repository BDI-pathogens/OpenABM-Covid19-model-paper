{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# OpenABM-Covid19 - Example Lockdown\n",
    "\n",
    "This examples show how to run a simulation on 50k people and turn on a lockdown after 20 days.\n",
    "\n",
    "First we set the get the baseline parameters, change the population to 50k and then intialise the simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import example_utils as utils\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "params = utils.get_baseline_parameters()\n",
    "params.set_param( \"n_total\", 50000 )\n",
    "\n",
    "sim   = utils.get_simulation( params )\n",
    "model = sim.env.model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we run for 30 days."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "sim.steps( 30 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we turn on a lockdown where the number of interactions on the occupation networks and random network are cut to 10% of their pre-lockdown level and the strength of household transmissions is 1.5 times the pre-lockdown level. And run for another 10 days."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.update_running_params(\"lockdown_occupation_multiplier_primary_network\", 0.1)\n",
    "model.update_running_params(\"lockdown_occupation_multiplier_secondary_network\", 0.1)\n",
    "model.update_running_params(\"lockdown_occupation_multiplier_working_network\", 0.1)\n",
    "model.update_running_params(\"lockdown_occupation_multiplier_retired_network\", 0.1)\n",
    "model.update_running_params(\"lockdown_occupation_multiplier_elderly_network\", 0.1)\n",
    "model.update_running_params(\"lockdown_random_network_multiplier\", 0.1)\n",
    "model.update_running_params(\"lockdown_house_interaction_multiplier\", 1.5)\n",
    "model.update_running_params(\"lockdown_on\", 1)\n",
    "sim.steps( 10 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Turn the lockdown off and run for another 10 days."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.update_running_params(\"lockdown_on\", 0)\n",
    "sim.steps( 10 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the number of daily new infections over the course of the simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1215f6b50>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "timeseries = pd.DataFrame( sim.results )\n",
    "timeseries[\"daily_infected\"] = timeseries[\"total_infected\"].diff(1)\n",
    "\n",
    "plt.figure()\n",
    "timeseries.daily_infected.plot( x = \"time\", legend = True )\n",
    "timeseries.lockdown.plot( x = \"time\", legend = True, secondary_y = True, style = 'g' )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hide_input": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
